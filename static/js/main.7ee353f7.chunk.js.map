{"version":3,"sources":["components/NoWalletDetected.js","components/NetworkErrorMessage.js","components/WalletStatus.js","components/HelperNFT.js","components/Login.js","helper.js","components/Villain.js","components/RecruitMember.js","components/Events.js","components/Dapp.js","components/AttributePage.js","components/Villains.js","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","WalletStatus","address","statusData","connectWallet","networkError","val","blockNumber","currentBlock","cachedBlock","Container","Row","Col","style","fontSize","HelperNFT","awardItem","data","margin","textAlign","border","background","width","padding","value","event","classes","keyField","rows","columns","tableLayout","color","rowStyle","row","rowIndex","fontWeight","Login","loginFunc","useState","password","setPassword","onSubmit","name","required","onChange","minMaxRGB","Math","min","max","get_rgb","rgb","adj","r","g","b","ret","draw_villain","ctx","villain","pixelData","factor","j","length","attr","numBlessed","numPunished","pixels","z","useMap","y","parseInt","x","fillStyle","fillRect","short_addr","addr","slice","update_cache","attrName","prevState","Villain","villainData","userAddress","tribulate","valhalla","pricing","vId","useParams","canvasRendered","setCanvasRendered","canvasRef","useRef","useEffect","canvas","current","getContext","drawCanvas","attrs","s","split","push","height","ref","RecruitMember","recruitMember","isApproved","getApproval","defaultValue","approved","setApproved","sAddr","sId","state","setState","inputChanged","checkApproval","ethers","utils","isAddress","then","result","constants","AddressZero","recruitText","approvalText","to","disabled","OverlayTrigger","placement","overlay","Tooltip","opacity","Events","radioValue","setRadioValue","showData","ButtonGroup","toggle","map","radio","idx","ToggleButton","variant","checked","e","currentTarget","AttributePage","props","initialState","attrFilter","init","Object","keys","contractAddresses","key","this","React","createRef","xFactor","yFactor","invert","includes","i","draw","els","category","remaining","initial","attrData","Card","minWidth","maxWidth","borderColor","marginBottom","marginRight","Body","Title","replace","Text","CardDeck","display","flexWrap","marginLeft","onChangeFilter","bind","concat","categoriesToAttributes","num","renderAttributeGrid","Component","Villains","force","villains","v","isMuseum","sacrificeAddr","id","sacrificeId","titleDiv","owner","renderVillainGrid","PASSWORD","CHAIN_ID_MAP","1","3","DYNAMIC_CACHE_VARIABLES","VALHALLA_COLUMNS","RECRUITS_COLUMNS","TRIBULATIONS_COLUMNS","HELPERMINTS_COLUMNS","attributesToCategories","Dapp","localStorage","getItem","clear","setItem","undefined","cachedPixelData","JSON","parse","isAuthenticated","storedPwd","bcrypt","compareSync","tokenData","selectedAddress","balance","txBeingSent","transactionError","existingVillains","userVillains","events","valhallas","recruits","tribulations","helperMints","authenticated","varName","cachedVal","cachedBlockNumber","document","body","backgroundColor","window","ethereum","on","networkId","console","log","_connectWallet","pwd","Navbar","expand","Brand","Image","src","Toggle","aria-controls","Collapse","Nav","Link","as","_dismissNetworkError","path","_awardItem","_recruitMember","nftContractAddr","_isApproved","_getApproval","exact","children","memberId","_tribulate","minAmt","_valhalla","position","_authenticate","_stopPollingData","contractArtifact","Contract","abi","_provider","getSigner","a","request","method","_checkNetwork","providers","Web3Provider","_helperContracts","_getHelperContracts","_setupContractData","_bvContract","makeContract","BitVillainsArtifact","_initialize","tx","_getPixelData","from","tokenId","pricePaid","nextPrintPrice","nextBurnPrice","membersAlive","reserve","eventKey","getAddress","formatEther","toString","_memberToRecruitedMap","priceReceived","nextRecruitPrice","nextValhallaPrice","who","isPunishment","stringify","_updateDynamicData","_updateDynamicDataInterval","setInterval","MILLISECONDS_IN_SECOND","newAddress","_resetState","_intializeEthers","_token","tokenContractAddress","Token","TokenArtifact","queryFilter","filters","Transfer","eventResults","args","MemberRecruited","MemberToValhalla","Tribulation","_pollDataInterval","_updateBalance","clearInterval","symbol","balanceOf","helperContracts","BVTest721Artifact","BVTest1155Artifact","attrContracts","contract","AttributeArtifact","_attrContracts","attrManContracts","AttributeManagerArtifact","_attrManContracts","getPixels","getPixelMap","m_attrs","m_sizes","size","m_sizes_original","oSize","numVillains","getMemberAttributes","error","m_attrMap","attrMap","m_sacrificeMap","getValhallaPrice","vp","getPunishedBlessedPrice","tp","getBlockNumber","ev","nftContract","ERC721Artifact","getApproved","_dismissTransactionError","_sendTx","approve","recruitMemberWith721","parseEther","func","hash","toast","success","wait","receipt","status","Error","code","networkVersion","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ee353f7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {Container, Row, Col} from 'react-bootstrap';\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function WalletStatus({ address, statusData, connectWallet, networkError, dismiss }) {\n  let val = (\n          <div>\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button> \n          </div>\n  );\n  const blockNumber = statusData.currentBlock || 'loading';\n  const cachedBlock = statusData.cachedBlock || 'loading';\n  if(address){\n    val = (<div>Connected Wallet: {address}</div>);\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n        <Container>\n        <Row>\n          <Col>\n            <div className=\"col-6 p-4 text-center\">\n              {val}\n            </div>\n          {/* Metamask network should be set to Localhost:8545. */}\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n          </Col>\n          <Col style={{fontSize:'15px'}}>\n            Latest Block: {blockNumber}<br />\n            Displayed Block: {cachedBlock}\n          </Col>\n        </Row>\n        </Container>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nexport function HelperNFT({ awardItem, address, data}) {\n  const rowStyle = (row, rowIndex) => {\n      let style = {fontWeight:'normal'};\n      if (row[\"to\"] == address){\n          style['fontWeight'] = 'bold';\n      }\n      return style;\n  };\n  return (\n    <div style={{margin:'0 auto', textAlign:'left', border:'2px solid #008080', background:'white', width:'50%', padding:\"1%\"}}>\n      <h4>Generate a Sample Sacrificial NFT</h4>\n      <form\n      >\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\"\n            value=\"Mint NFT\" \n            type=\"button\"\n            onClick={(event) => {\n              if (address) {\n                awardItem(address);\n              }\n            }}\n          />\n        </div>\n      </form>\n      <br />\n      <h4>Sacrificial NFT Mints</h4>\n        <BootstrapTable classes=\"EventsTable\" keyField='tokenId' data={ data.rows } columns={ data.columns } style={{tableLayout:'auto', color:'blue'}} rowStyle={rowStyle}/>\n    </div>\n  );\n}\n","import React, {useState} from \"react\";\n\nexport function Login({ loginFunc }) {\n  const [password, setPassword] = useState('')\n  return (\n    <div style={{width:'10%', margin: '0 auto'}}>\n      <h4>Login BitVillains Beta</h4>\n      <form\n        onSubmit={(event) => {\n          loginFunc(password);\n        }}\n      >\n        <div className=\"form-group\">\n          <input className=\"form-control\" type=\"text\" name=\"password\" required\n          onChange={(event)=>{setPassword(event.target.value)}}\n          />\n          <br />\n          <input className=\"btn btn-primary\"\n            value=\"Login\" \n            type=\"button\"\n            onClick={(event) => {\n              loginFunc(password);\n            }}\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","function minMaxRGB(val){\n    return Math.min(Math.max(0, val), 255);\n}\n\nexport function get_rgb(rgb, adj=0){\n    const r = (rgb>>16)&0x0ff;\n    const g = (rgb>>8)&0x0ff;\n    const b = (rgb)&0x0ff;\n    const ret = [minMaxRGB(r+adj), minMaxRGB(g+adj), minMaxRGB(b+adj)]\n    return ret;\n}\n\nexport function draw_villain(ctx, villain, pixelData, factor=5){\n    let size = 16;\n    let w = size * factor;\n    let h = size * factor;\n    for (let j = 0;j< villain['attrs'].length; j++){\n        const attr = villain['attrs'][j];\n        const numBlessed = villain['numBlessed'];\n        const numPunished = villain['numPunished'];\n        const adj = numBlessed - numPunished -1;\n        let pixels = pixelData[attr.name].pixels;\n        for (var z = 0;z < pixels.length; z++)\n        {\n            if(!pixelData[attr.name].useMap[z])\n                continue;\n            var y = parseInt(z/16) * factor;\n            var x = z % 16 * factor;\n            let rgb = get_rgb(pixels[z], adj);\n            ctx.fillStyle = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n            ctx.fillRect(x,y, factor, factor);\n        }\n    }\n\n\n}\n\nexport function short_addr(addr){\n    return addr.slice(0, 4) + \"...\" + addr.slice(-4);\n}\n\nexport function update_cache(attrName, val, prevState){\n    const statusData = {...prevState.statusData};\n    statusData[attrName] = val;\n    return {statusData};\n}\n","import React, {useState, useRef, useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {draw_villain} from \"../helper.js\";\nimport './Dapp.css';\n\nconst IMG_SIZE = 384\nexport function Villain({villainData, pixelData, userAddress, tribulate, valhalla, pricing}) {\n  let {vId} = useParams();\n  const [canvasRendered, setCanvasRendered] = useState(false);\n  const canvasRef = useRef();\n  const villain = villainData[vId];\n\n  function drawCanvas(){\n    const canvas = canvasRef.current;\n    if(canvas && !canvasRendered){\n        draw_villain(canvas.getContext('2d'), villain, pixelData, canvas.getContext(\"2d\").canvas.width/16);\n        setCanvasRendered(true);\n    }\n  }\n\n  useEffect(() =>{\n    drawCanvas();\n  });\n  if(!villain){\n    return(<div>\n      <h4>Villain {vId} not found!</h4>\n    </div>);\n  }\n  const attrs = [];\n  for (const attr of villain['attrs']){\n    let s = \"\";\n    for (const w of attr['name'].split(/(?=[A-Z])/))\n        s+=w+\" \";\n    attrs.push(<div key={s}>{s}</div>);\n  }\n  return (\n    <div style={{width:IMG_SIZE*1.1, textAlign:'center'}} className=\"MainBodyElement\">\n      <h4>Villain {vId}</h4>\n      <div><canvas height={IMG_SIZE} width={IMG_SIZE} ref={canvasRef} /></div>\n      <div>Owner: {villain['owner']}</div>\n      <div>Sacrifice Contract Addr: {villain['sacrificeAddr']}</div>\n      <div>Sacrifice Id: {villain['sacrificeId']}</div>\n      <div>{attrs}</div>\n      <div>Times Blessed: {villain['numBlessed']}</div>\n      <div>Times Punished: {villain['numPunished']}</div>\n      {villain['owner'] === userAddress &&\n          <div>\n          <div>\n          <input className=\"btn btn-primary\" type=\"button\" value=\"Tribulate\"\n             onClick={()=>tribulate(vId)}/>\n        </div>\n          <div>\n          <input className=\"btn btn-primary\" type=\"button\" value={\"Valhalla for \"+pricing.valhalla+\" ETH\"}\n             onClick={()=>valhalla(vId, 0)}/>\n        </div>\n        <br />\n        </div>\n      }\n    </div>\n  );\n}\n","import React, {useState} from \"react\";\nimport { ethers } from \"ethers\";\nimport {Link} from \"react-router-dom\";\nimport \"./Dapp.css\";\nimport {short_addr} from \"../helper.js\";\nimport {Tooltip, OverlayTrigger} from 'react-bootstrap';\n\nexport function RecruitMember({ recruitMember, isApproved, getApproval, pricing, defaultValue}) {\n  const [approved, setApproved] = useState(false);\n  const [state, setState] = useState({\n      sAddr: defaultValue,\n      sId: \"0\"\n  });\n  \n  function inputChanged(event){\n      const val = event.target.value\n      setState({\n        ...state,\n        [event.target.name]: val\n      });\n      let sAddr = state.sAddr;\n      let sId = state.sId;\n      if(event.target.name === 'sAddr')\n          sAddr = val;\n      else if(event.target.name === 'sId')\n          sId = val;\n      checkApproval(sAddr, sId);\n  }\n\n  function checkApproval(sAddr, sId){\n      if(ethers.utils.isAddress(sAddr) && sId != \"\"){\n          isApproved(sAddr, sId).then((result)=>{\n            setApproved(result != ethers.constants.AddressZero);\n          });\n      }\n\n  }\n\n  function recruitMemberClicked(event){\n      if (state.sAddr && state.sId) {\n        recruitMember(state.sAddr, state.sId).then((result)=>{\n      });\n      }\n    }\n  function getApprovalClicked(event){\n      if (state.sAddr && state.sId) {\n        getApproval(state.sAddr, state.sId).then((result)=>{\n            checkApproval(state.sAddr, state.sId);\n        });\n      }\n    }\n\n  const recruitText = \"Recruit Member with sacrifice \" + (state.sId ? state.sId : '?') + \" from \"+short_addr(state.sAddr);\n  const approvalText = \"Get Approval for \" + (state.sId ? state.sId : '?') + \" from \"+short_addr(state.sAddr);\n  return (\n    <div style={{textAlign:'left', background:'white', width:'50%', padding:\"1%\"}} className=\"MainBodyElement\">\n      <h4>Recruit a New Bit Villain</h4>\n      <form\n      >\n        <p>\n        An NFT sacrifice is required to recruit a new bit villain. Even if a bit villain is sent to Valhalla, the sacrifice will remain locked up in perpetuity.\n        </p>\n        <p>\n         In the testnet environment, there is a <Link to=\"/helper\">sample NFT contract </Link>used to generate a new sacrificial NFT for recruitment. Once minted successfully, it appears in the \"Sacrificial NFT Mints\" table with the corresponding owner and generated sacrifice id.\n        <br />\n        <br />\n        The sample NFT contract (and like all ERC721 standard NFTs on ethereum) first requires an approval transaction to allow the BV contract to transfer the sacrifice id to itself. After the approval transaction is confirmed, the sacrifice can be used to recruit a new bit villain.\n        </p>\n        <div className=\"form-group\">\n          <label>Sacrifice Contract address (pre-populated with sample NFT)</label>\n          <input className=\"form-control\" type=\"text\" name=\"sAddr\" required\n            value={state.sAddr}\n            onChange={inputChanged}\n            disabled={true}\n          />\n        </div>\n        <br />\n        <div className=\"form-group\">\n          <label>Sacrifice Id</label>\n          <input className=\"form-control\" type=\"number\" name=\"sId\" required onChange={inputChanged} value={state.sId}/>\n        </div>\n        <br />\n        {!approved &&\n        <div>\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"button\" value={approvalText} disabled={approved}\n             onClick={getApprovalClicked}/>\n        </div>\n        <br />\n        <div className=\"form-group\">\n          <OverlayTrigger placement=\"top\" overlay={<Tooltip>Sacrifice needs approval before recruitment can occur< /Tooltip>}><div style={{opacity:'50%'}} className=\"btn btn-primary\">{recruitText}</div></OverlayTrigger>\n        </div>\n        </div>\n        }\n        {approved &&\n        <div>\n        <div className=\"form-group\">\n          <OverlayTrigger placement=\"top\" overlay={<Tooltip >Sacrifice has already been approved< /Tooltip>}><div style={{opacity:'50%'}} className=\"btn btn-primary\">{approvalText}</div></OverlayTrigger>\n        </div>\n        <br />\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"button\" value={recruitText}\n             disabled={!approved}\n             onClick={recruitMemberClicked}/>\n        </div>\n        </div>\n        }\n      </form>\n    </div>\n  );\n}\n","import React, {useState} from \"react\";\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport {ButtonGroup, ToggleButton} from 'react-bootstrap';\nimport './Events.css';\n\nexport function Events({data}) {\n    const [radioValue, setRadioValue] = useState('recruits');\n    const radios = [\n        { name: 'Recruits', value: 'recruits' },\n        { name: 'Valhalla', value: 'valhallas' },\n        { name: 'Tribulations', value: 'tribulations' },\n    ];\n    const showData = data[radioValue];\n    return (\n        <div>\n        <ButtonGroup className='EventsControlButton' toggle>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            type=\"radio\"\n            variant=\"secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n        </ButtonGroup>\n        <BootstrapTable classes=\"EventsTable\" keyField='eventKey' data={ showData.rows } columns={ showData.columns } style={{tableLayout:'auto', color:'blue'}}/>\n        </div>\n    );\n}\n","import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\nimport bcrypt from 'bcryptjs';\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../contracts/Token.json\";\nimport AttributeArtifact from \"../contracts/Attribute.json\";\nimport AttributeManagerArtifact from \"../contracts/AttributeManager.json\";\nimport BVTest721Artifact from \"../contracts/BVTest721.json\";\nimport BVTest1155Artifact from \"../contracts/BVTest1155.json\";\nimport ERC721Artifact from \"../contracts/ERC721.json\";\nimport BitVillainsArtifact from \"../contracts/BitVillains.json\";\nimport tokenContractAddress from \"../contracts/contract-address.json\";\nimport contractAddresses from \"../contracts/addresses.json\";\nimport categoriesToAttributes from \"../categories.json\"\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { WalletStatus } from \"./WalletStatus\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { HelperNFT } from \"./HelperNFT\";\nimport { Login } from \"./Login\";\nimport { Villain } from \"./Villain\";\nimport { RecruitMember } from \"./RecruitMember\";\nimport { Events } from \"./Events.js\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\nimport { AttributePage } from \"./AttributePage\";\nimport { Villains } from \"./Villains\";\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button, Card, CardDeck, Image} from 'react-bootstrap';\nimport {get_rgb, update_cache} from \"../helper.js\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Dapp.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nconst PASSWORD = \"$2a$10$eRHp8Jx2EoWK5x4BUFB2iOBWijwXObljzA9ZyZoUutnFCfzl.2Ai.\"\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\nconst ROPSTEN_NETWORK_ID = '3';\nconst MILLISECONDS_IN_SECOND = 1000;\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\nconst ERROR_CODE_SACRIFICE_ALREADY_APPROVED = -32603;\nconst CHAIN_ID_MAP = {1: 'Mainnet', 3: 'Ropsten'}\nconst CURRENT_CHAIN_ID = 3;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nconst DYNAMIC_CACHE_VARIABLES = ['existingVillains', 'userVillains', 'attrData', 'pricing', 'cachedBlockNumber'];\nconst VALHALLA_COLUMNS = [\n    {'dataField': 'owner', 'text': 'Owner', style: {'width':'5px'}},\n    {'dataField': 'id', 'text': 'BV Id'},\n    {'dataField': 'priceReceived', 'text': 'Valhalla Price'},\n    {'dataField': 'nextRecruitPrice', 'text': 'Next Recruit Price'},\n    {'dataField': 'nextValhallaPrice', 'text': 'Next Valhalla Price'},\n    {'dataField': 'membersAlive', 'text': 'Members Alive'},\n    {'dataField': 'reserve', 'text': 'BV Reserve'}];\nconst RECRUITS_COLUMNS = [\n    {'dataField': 'to', 'text': 'Owner', style: {'width':'5px'}},\n    {'dataField': 'id', 'text': 'BV Id'},\n    {'dataField': 'pricePaid', 'text': 'Price Paid'},\n    {'dataField': 'nextPrintPrice', 'text': 'Next Print Price'},\n    {'dataField': 'nextBurnPrice', 'text': 'Next Burn Price'},\n    {'dataField': 'membersAlive', 'text': 'Members Alive'},\n    {'dataField': 'reserve', 'text': 'BV Reserve'}];\nconst TRIBULATIONS_COLUMNS = [\n    {'dataField': 'who', 'text': 'Owner', style: {'width':'5px'}},\n    {'dataField': 'id', 'text': 'BV Id'},\n    {'dataField': 'isPunishment', 'text': 'Is Punishment'},\n    {'dataField': 'numPunished', 'text': 'Times Punished'},\n    {'dataField': 'numBlessed', 'text': 'Times Blessed'}];\nconst HELPERMINTS_COLUMNS = [\n    {'dataField': 'to', 'text': 'Owner', style: {'width':'5px'}},\n    {'dataField': 'tokenId', 'text': 'Token Id'}];\nlet attributesToCategories = {}\nfor (var key of Object.keys(categoriesToAttributes)) {\n    for (let i = 0; i < categoriesToAttributes[key].length; i++) {\n        attributesToCategories[categoriesToAttributes[key][i]] = key;\n    }\n}\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if(localStorage.getItem('contractAddress') != contractAddresses['BitVillains']){\n        localStorage.clear();\n        localStorage.setItem('contractAddress', contractAddresses['BitVillains']);\n    }\n\n    let pixelData = undefined;\n    const cachedPixelData = JSON.parse(localStorage.getItem(\"pixelData\"));\n\n    let isAuthenticated = false;\n    const storedPwd = localStorage.getItem(\"cachedPassword\");\n    if (storedPwd && bcrypt.compareSync(storedPwd, PASSWORD)){\n        isAuthenticated = true;\n    }\n    if(cachedPixelData && Object.keys(cachedPixelData) != 0)\n        pixelData = cachedPixelData;\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      canvasRendered: false,\n      existingVillains:  [],\n      userVillains: {},\n      pixelData: pixelData,\n      events: {\n          valhallas: {'rows': [], 'columns': VALHALLA_COLUMNS},\n          recruits: {'rows': [], 'columns': RECRUITS_COLUMNS},\n          tribulations: {'rows': [], 'columns': TRIBULATIONS_COLUMNS},\n          helperMints: {'rows': [], 'columns': HELPERMINTS_COLUMNS}\n      },\n      statusData: {},\n      authenticated: isAuthenticated\n    };\n    for (const varName of DYNAMIC_CACHE_VARIABLES){\n        const cachedVal = JSON.parse(localStorage.getItem(varName));  \n        if (cachedVal)\n            this.initialState[varName] = cachedVal;\n    }\n    // cachedBlock is last time in current session block was updated (metadata)\n    // cachedBlockNumber is the actual value set in the dynamic data array\n    this.initialState.statusData.cachedBlock = this.initialState.cachedBlockNumber;\n    this.state = this.initialState;\n  }\n  componentDidMount() {\n    document.body.style.backgroundColor = \"#D2D2D2\";\n    // We reset the dapp state if the network is changed\n    if (window.ethereum){\n        window.ethereum.on(\"chainChanged\", ([networkId]) => {\n          console.log('hi', networkId)\n          this.setState({networkId:networkId});\n          this._connectWallet();\n        });\n        this._connectWallet();\n    }\n  }\n\n  _authenticate(pwd){\n    /*var salt = bcrypt.genSaltSync(10);\n    var hash = bcrypt.hashSync(pwd, salt);\n    console.log(pwd);\n    console.log(hash);\n    */\n    if (bcrypt.compareSync(pwd, PASSWORD)){\n        console.log(\"AUTHENTICATED\");\n        this.setState({authenticated:true});\n        localStorage.setItem(\"cachedPassword\", pwd);\n    }\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if(!this.state.authenticated){\n      return <Login\n        loginFunc={(pwd) =>\n          this._authenticate(pwd)\n        }\n      />;\n    }\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n    if(this.state.networkId !== CURRENT_CHAIN_ID){\n        return(\n        <div>\n        <h1> BitVillains </h1>\n        <p> Please connect to the correct network ({CHAIN_ID_MAP[CURRENT_CHAIN_ID]}) for access</p>\n        </div>);\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the WalletStatus component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (<div />);\n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n\n    // If everything is loaded, we render the application.\n    return (\n      <Router>\n      <div>\n        <Navbar expand=\"sm\" style={{backgroundColor: 'black', color:'white'}}>\n          <Navbar.Brand href=\"#home\"><Image className=\"MainLogo d-inline-block align-top\" src={\"/logo1.png\"} /></Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mainNavBar\">\n              <Nav.Link as={Link} to=\"/index\">Home</Nav.Link>\n              <Nav.Link as={Link} to=\"/attributePool\">Attribute Pool</Nav.Link>\n              <Nav.Link as={Link} to=\"/recruitMember\">Recruit Bit Villain</Nav.Link>\n              <Nav.Link as={Link} to=\"/helper\">Helper NFT</Nav.Link>\n              <Nav.Link as={Link} to=\"/bitVillains\">Existing BVs</Nav.Link>\n              <Nav.Link as={Link} to=\"/userBitVillains\">My Bit Villains</Nav.Link>\n              <Nav.Link as={Link} to=\"/museum\">Sacrifice Museum</Nav.Link>\n              <Nav.Link as={Link} to=\"/events\">Blockchain Events</Nav.Link>\n              {false &&\n              <NavDropdown title=\"Info\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n              </NavDropdown>}\n            </Nav>\n            <WalletStatus \n              address={this.state.selectedAddress}\n              statusData={this.state.statusData}\n              connectWallet={() => this._connectWallet()} \n              networkError={this.state.networkError}\n              dismiss={() => this._dismissNetworkError()}\n            />\n          </Navbar.Collapse>\n        </Navbar>\n        <div id=\"colorBar\" />\n        <br />\n\n      <Switch>\n      <Route path=\"/attributePool\">\n        <AttributePage pixelData={this.state.pixelData} attrData={this.state.attrData} />\n      </Route>\n      <Route path=\"/bitVillains\">\n      <Villains pixelData={this.state.pixelData} villains={this.state.existingVillains} />\n      </Route>\n      <Route path=\"/museum\">\n      <Villains pixelData={this.state.pixelData} villains={this.state.existingVillains}  isMuseum={true}/>\n      </Route>\n      <Route path=\"/userBitVillains\">\n      <Villains pixelData={this.state.pixelData} villains={this.state.userVillains[this.state.selectedAddress]?? []}/>\n      </Route>\n      <Route path='/helper'>\n          <HelperNFT\n            awardItem={(address) =>\n              this._awardItem(address)\n            }\n            address={this.state.selectedAddress}\n            data={this.state.events.helperMints}\n          />\n      </Route>\n      <Route path='/recruitMember'>\n          <RecruitMember\n            recruitMember={(sAddr, sId) =>\n              this._recruitMember(sAddr, sId)\n            }\n            isApproved={(nftContractAddr, sId) =>\n              this._isApproved(nftContractAddr, sId)\n            }\n            getApproval={(sAddr, sId) =>\n              this._getApproval(sAddr, sId)\n            }\n            pricing={this.state.pricing}\n            defaultValue={contractAddresses['BVTest721']}\n          />\n      </Route>\n      <Route exact path=\"/\">\n        <Redirect to=\"/index\" />\n      </Route>\n      <Route path=\"/index\">\n          <div className='MainBodyElement' style={{width:'50%', padding:\"1%\"}}>\n          BitVillains is a \"hard\" NFT project such that all data need to replicate said NFT is stored immutably on the Ethereum blockchain. There are no third party image hosting involved nor unstable IFPS binning required. \n        <br /><br />\n        Each BV is generated with a specific attribute per category (Background, Skin, Hair, Outfit, and Accessory) from the <Link to=\"/attributePool\">Attribute Pool</Link> randomly. The generation process also requires a sacrificial NFT that will be permanently burned. The price of a newly minted BV is determined by a pricing curve.\n        <br /><br />\n        An owner may choose to send their bit villain to valhalla at any time and in compensation receives 80% of the last recruitment price.\n        <br /><br />\n        Additionally, an owner may choose their bit villain to undergo a tribulation costing 1/2 the amount reedemable by being sent to valhalla. The tribulation transaction can either result in a punishment or blessing.\n        <br /><br />\n        <Link to=\"/recruitMember\">Recruit a BitVillain now</Link>\n          </div>\n      </Route>\n      <Route path=\"/events\">\n        <Events \n            data={this.state.events}\n        />\n      </Route>\n      <Route path=\"/villain/:vId\" children={<Villain villainData={this.state.existingVillains} pixelData={this.state.pixelData} userAddress={this.state.selectedAddress}\n            tribulate={(memberId) =>\n              this._tribulate(memberId)\n            }\n            valhalla={(memberId, minAmt) =>\n              this._valhalla(memberId, minAmt)\n            }\n            pricing={this.state.pricing} />} />\n      </Switch>\n      </div>\n      <ToastContainer position=\"bottom-right\" />\n      </Router>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n  makeContract(addr, contractArtifact){\n    return new ethers.Contract(\n      addr,\n      contractArtifact.abi,\n      this._provider.getSigner(0)\n    );\n}\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    this._helperContracts = this._getHelperContracts();\n    this._setupContractData();\n    this._bvContract = this.makeContract(contractAddresses['BitVillains'], BitVillainsArtifact);\n    this._initialize(selectedAddress);\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider.on(\"pending\", (tx) =>{\n        console.log('pending');\n        console.log(tx);\n    });\n    this._provider.on(\"block\", (blockNumber) => {\n        this.setState(prevState => update_cache('currentBlock', blockNumber, prevState));\n    })\n    this._getPixelData().then((pixelData)=>{;\n    // TODO this should be cleared up beacuse of the copy paste code. we should parse events in one function somewhow\n    this._helperContracts['erc721'].on(\"Transfer\", (from, to, tokenId) =>{\n        if (ethers.constants.AddressZero == from){\n            tokenId = parseInt(tokenId);\n            console.log('erc71 sample mint: ', to, tokenId);\n            let helperMints = this.state.events.helperMints;\n            helperMints['rows'].push({to, tokenId});\n            this.setState({helperMints});\n        }\n    })\n    this._bvContract.on(\"MemberRecruited\", (to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve) => {\n        const eventKey = `${to} ${id} ${pricePaid} ${nextPrintPrice} ${nextBurnPrice} ${membersAlive} ${reserve}`;\n        let recruits = this.state.events.recruits;\n        to = ethers.utils.getAddress(to);\n        id = parseInt(id);\n        pricePaid = ethers.utils.formatEther(parseInt(pricePaid).toString());\n        nextPrintPrice = ethers.utils.formatEther(parseInt(nextPrintPrice).toString());\n        nextBurnPrice = ethers.utils.formatEther(parseInt(nextBurnPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        this._memberToRecruitedMap[id] = {'to': to, 'id': id, 'pricePaid': pricePaid, 'nextBurnPrice': nextBurnPrice};\n        recruits['rows'].push({to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve, eventKey});\n        this.setState({recruits});\n    });\n    this._bvContract.on(\"MemberToValhalla\", (owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve) => {\n        const eventKey = `${owner} ${id} ${priceReceived} ${nextRecruitPrice} ${nextValhallaPrice} ${membersAlive} ${reserve}`;\n        id = parseInt(id);\n        priceReceived = ethers.utils.formatEther(parseInt(priceReceived).toString());\n        nextRecruitPrice = ethers.utils.formatEther(parseInt(nextRecruitPrice).toString());\n        nextValhallaPrice = ethers.utils.formatEther(parseInt(nextValhallaPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        let valhallas = this.state.events.valhallas;\n        valhallas['rows'].push({owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve});\n        this._memberToRecruitedMap[id] = {'to': 'valhalla'};\n        this.setState({valhallas});\n    });\n    this._bvContract.on(\"Tribulation\", (who, id, isPunishment, numPunished, numBlessed) => {\n        const eventKey = `${who} ${id} ${isPunishment} ${numPunished} ${numBlessed}`;\n        who = ethers.utils.getAddress(who);\n        id = parseInt(id);\n        numPunished = parseInt(numPunished).toString();\n        numBlessed = parseInt(numBlessed).toString();\n        let tribulations = this.state.events.tribulations;\n        tribulations['rows'].push({who, id, isPunishment, numPunished, numBlessed, eventKey});\n        this.setState({tribulations});\n    });\n    if(!this.state.pixelData){\n      localStorage.setItem(\"pixelData\", JSON.stringify(pixelData));\n      this.setState({pixelData});\n    }\n    });\n    this._updateDynamicData(selectedAddress);\n    this._updateDynamicDataInterval = setInterval(() => this._updateDynamicData(selectedAddress), MILLISECONDS_IN_SECOND * 30);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: ethers.utils.getAddress(userAddress),\n    });\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n  }\n\n  async _intializeEthers() {\n    \n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._token = new ethers.Contract(\n      tokenContractAddress.Token,\n      TokenArtifact.abi,\n      this._provider.getSigner(0)\n    );\n\n    this._memberToRecruitedMap = {}\n    let events = {...this.state.events};\n    events.recruits['rows'] = [];\n    events.valhallas['rows'] = [];\n    events.tribulations['rows'] = [];\n    events.helperMints['rows'] = [];\n    let eventResults = await this._helperContracts['erc721'].queryFilter(this._helperContracts['erc721'].filters.Transfer());\n    for(const event of eventResults){\n        let [from, to, tokenId] = event.args;\n        if (ethers.constants.AddressZero == from){\n            tokenId = parseInt(tokenId);\n            console.log('erc71 sample mint: ', to, tokenId);\n            events.helperMints['rows'].push({to, tokenId});\n        }\n    }\n    eventResults = await this._bvContract.queryFilter(this._bvContract.filters.MemberRecruited());\n    for(const event of eventResults){\n        const eventKey = `${event.args}`;\n        let [to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve] = event.args;\n        to = ethers.utils.getAddress(to);\n        id = parseInt(id);\n        pricePaid = ethers.utils.formatEther(parseInt(pricePaid).toString());\n        nextPrintPrice = ethers.utils.formatEther(parseInt(nextPrintPrice).toString());\n        nextBurnPrice = ethers.utils.formatEther(parseInt(nextBurnPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        this._memberToRecruitedMap[id] = {'to': to, 'id': id, 'pricePaid': pricePaid, 'nextBurnPrice': nextBurnPrice};\n        events.recruits['rows'].push({to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve, eventKey});\n    }\n    eventResults = await this._bvContract.queryFilter(this._bvContract.filters.MemberToValhalla());\n    for(const event of eventResults){\n        const eventKey = `${event.args}`;\n        let [owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve] = event.args;\n        id = parseInt(id);\n        priceReceived = ethers.utils.formatEther(parseInt(priceReceived).toString());\n        nextRecruitPrice = ethers.utils.formatEther(parseInt(nextRecruitPrice).toString());\n        nextValhallaPrice = ethers.utils.formatEther(parseInt(nextValhallaPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        events.valhallas['rows'].push({owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve, eventKey})\n        this._memberToRecruitedMap[id] = {'to': 'valhalla'}\n    }\n    eventResults = await this._bvContract.queryFilter(this._bvContract.filters.Tribulation());\n    for(const event of eventResults){\n        const eventKey = `${event.args}`;\n        let [who, id, isPunishment, numPunished, numBlessed] = event.args;\n        who = ethers.utils.getAddress(who);\n        id = parseInt(id);\n        numPunished = parseInt(numPunished).toString();\n        numBlessed = parseInt(numBlessed).toString();\n        events.tribulations['rows'].push({who, id, isPunishment, numPunished, numBlessed, eventKey})\n    }\n    this.setState(events)\n\n  }\n\n  // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n\n    this.setState({ tokenData: { name, symbol } });\n  }\n\n  async _updateBalance() {\n    if(this.state.selectedAddress) {\n        const balance = await this._token.balanceOf(this.state.selectedAddress);\n        this.setState({ balance });\n    }\n  }\n\n  _getHelperContracts() {\n    let helperContracts = {};\n    helperContracts['erc721'] = this.makeContract(contractAddresses['BVTest721'], BVTest721Artifact);\n    helperContracts['erc1155'] = this.makeContract(contractAddresses['BVTest1155'], BVTest1155Artifact);\n    return helperContracts;\n  }\n\n  _setupContractData(){\n    let attrContracts = {};\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        let addr = contractAddresses['Attribute'][key];\n        const contract = new ethers.Contract(\n          addr,\n          AttributeArtifact.abi,\n          this._provider.getSigner(0)\n        );\n        attrContracts[key] = contract;\n        attrContracts[addr] = contract;\n    }\n    this._attrContracts = attrContracts;\n    let attrManContracts = {}\n    for (var key of Object.keys(contractAddresses['AttributeManager'])) {\n        let addr = contractAddresses['AttributeManager'][key];\n        attrManContracts[key] = new ethers.Contract(\n          addr,\n          AttributeManagerArtifact.abi,\n          this._provider.getSigner(0)\n        );\n        let manAttrs = []\n        let idx = 0;\n    }\n    this._attrManContracts = attrManContracts;\n  }\n\n  async _getPixelData() {\n    let pixelData = {};\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        if(!this.state.pixelData)\n            pixelData[key] = {\n                'pixels': await this._attrContracts[key].getPixels(),\n                'useMap': await this._attrContracts[key].getPixelMap()\n            };\n    }\n    return pixelData;\n  }\n  async _updateDynamicData(userAddress) {\n    try{\n        let data = {};\n        data['attrData'] = {};\n        for (var key of Object.keys(contractAddresses['AttributeManager'])) {\n            let addr = contractAddresses['AttributeManager'][key];\n            let attrs = categoriesToAttributes[key];\n            for (var i =0; i < attrs.length; i++){\n                let addr = await this._attrManContracts[key].m_attrs(i);\n                let size = await this._attrManContracts[key].m_sizes(i);\n                let oSize = await this._attrManContracts[key].m_sizes_original(i);\n                let contract = this._attrContracts[addr];\n                let name = await contract.name();\n                data['attrData'][name] = {};\n                data['attrData'][name]['remainingGenePool'] = parseInt(size['_hex']);\n                data['attrData'][name]['initialGenePool'] = parseInt(oSize['_hex']);\n                data['attrData'][name]['category'] = attributesToCategories[attrs[i]];\n            }\n        }\n        data['existingVillains'] = [];\n        data['userVillains'] = {};\n        const numVillains = 10000;\n        var i = 0;\n        for (i = 0; i < numVillains; i++){\n            let attrs = await this._bvContract.getMemberAttributes(i);\n            if (attrs.length < 1)\n                break;\n            let villain = {}\n            villain['attrs'] = [];\n            for (var j = 0; j < attrs.length; j++){\n                const attr = this._attrContracts[attrs[j]];\n                villain['attrs'].push({'name': await attr.name()});\n            }\n            let owner;\n            try{\n                // owner = await this._bvContract.ownerOf(i);\n                owner = this._memberToRecruitedMap[i].to;\n                // await this._bvContract.balanceOf(userAddress);\n            } catch (error){\n            }\n            villain['owner'] = owner;\n            const attrMap = await this._bvContract.m_attrMap(i);\n            let [sacrificeAddr, sacrificeId] = await this._bvContract.m_sacrificeMap(i);\n            sacrificeId = parseInt(sacrificeId);\n            villain['numBlessed'] = attrMap.numBlessed;\n            villain['numPunished'] = attrMap.numPunished;\n            villain['id'] = i;\n            villain['sacrificeAddr'] = sacrificeAddr;\n            villain['sacrificeId'] = sacrificeId;\n            data['existingVillains'].push(villain);\n            if(!(owner in data['userVillains']))\n                data['userVillains'][owner] = [];\n            data['userVillains'][owner].push(villain);\n        }\n        data['pricing'] = {};\n        let vp = await this._bvContract.getValhallaPrice();\n        let tp = await this._bvContract.getPunishedBlessedPrice();\n        // let rp = await this._bvContract.getRecruitPrice(i);\n        data['pricing']['valhalla'] = ethers.utils.formatEther(parseInt(vp['_hex']).toString());\n        data['pricing']['tribulate'] = ethers.utils.formatEther(parseInt(tp['_hex']).toString());\n        // data['pricing']['recruit'] = ethers.utils.formatEther(parseInt(rp['_hex']).toString());\n        data['cachedBlockNumber'] = await this._provider.getBlockNumber();\n        this.setState(prevState => update_cache('cachedBlock', data['cachedBlockNumber'], prevState));\n\n        this.setState(data);\n        for (var key of Object.keys(data)){\n            localStorage.setItem(key, JSON.stringify(data[key]));\n        }\n    } catch(error){\n        console.log(error)\n        console.log('caught error while updating dynamic data');\n    }\n  }\n\n  _setCurrentUserVillains(){\n    const ev = this.state.data['existingVillains'];\n    for(var i=0; i<ev.length; i++){\n\n    }\n\n  }\n\n  async _isApproved(nftContractAddr, sId){\n    try {\n        const nftContract =  this.makeContract(nftContractAddr, ERC721Artifact);\n        return await nftContract.getApproved(sId);\n    } catch (error){\n        return false;\n    }\n  }\n\n  async _awardItem(to) {\n    this._dismissTransactionError();\n    await this._sendTx(this._helperContracts['erc721'].awardItem, to);\n  }\n\n  async _getApproval(sAddr, sId){\n    this._dismissTransactionError();\n    await this._sendTx(this._helperContracts['erc721'].approve, this._bvContract.address, sId);\n  }\n\n  async _recruitMember(sAddr, sId) {\n    this._dismissTransactionError();\n    return await this._sendTx(this._bvContract.recruitMemberWith721, sAddr, sId, {value:ethers.utils.parseEther(\"0.5\")});\n  }\n\n  async _tribulate(memberId) {\n    this._dismissTransactionError();\n    return await this._sendTx(this._bvContract.tribulate, memberId, {value:ethers.utils.parseEther(this.state.pricing['tribulate'])});\n  }\n\n  async _valhalla(memberId, minAmt) {\n    this._dismissTransactionError();\n    return await this._sendTx(this._bvContract.valhalla, memberId, minAmt);\n  }\n\n  async _sendTx(func, ...args){\n    try {\n      const tx = await func(...args);\n      this.setState({ txBeingSent: tx.hash });\n      toast.success(\"Transaction submited! Follow its progress with your wallet\");\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n      toast.success(\"Transaction mined! Block Number: \" + receipt.blockNumber);\n      await this._updateDynamicData(this.state.selectedAddress);\n\n      await this._updateBalance();\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        toast.error(\"Transaction was defined rejected by your wallet, please try again.\")\n      }\n      else if (error.code === -32603) {\n        toast.error(\"Transaction failed due to initial gas issue\");\n      }\n      else if (error.code === \"CALL_EXCEPTION\") {\n        toast.error(\"Transaction failed due to call exception, please check your gas limit and try again\");\n      }\n      else if (error.error.code === -32603) {\n        toast.error(error.error.message)\n      }\n\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    let ret = false;\n    const networkId = parseInt(window.ethereum.networkVersion);\n    if ( networkId === CURRENT_CHAIN_ID) {\n      ret = true;\n    }\n    this.setState({ \n      networkId: networkId\n    });\n    if(!ret){\n        this.setState({ \n          networkError: 'Please connect Metamask to Hardhat or Ropsten network',\n        });\n    }\n\n    return ret;\n  }\n}\n","import React from \"react\";\nimport contractAddresses from \"../contracts/addresses.json\";\nimport categoriesToAttributes from \"../categories.json\"\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button, Card, CardDeck} from 'react-bootstrap';\nimport {get_rgb} from \"../helper.js\";\n\nexport class AttributePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n        canvasRendered : false,\n        attrFilter: 'all'\n    }\n\n    this.state = this.initialState;\n    this.init();\n  }\n\n  init(){\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        this[`ref_${key}`] = React.createRef();\n    }\n\n  }\n\n  componentDidMount() {\n    this.drawCanvas();\n  }\n\n  componentDidUpdate() {\n    this.drawCanvas();\n  }\n\n  drawCanvas() {\n    if (!this.props.pixelData || this.state.canvasRendered)\n        return;\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        const canvas = this[`ref_${key}`].current;\n        if (!!canvas)\n        {\n            const ctx = canvas.getContext(\"2d\");\n            let size = 16;\n            let xFactor = ctx.canvas.width/16;\n            let yFactor = ctx.canvas.height/16;\n            let pixels = this.props.pixelData[key]['pixels'];\n            let invert = false;\n            if(key.includes('White'))\n                invert = true;\n            for (var i = 0;i < pixels.length; i++)\n            {\n                var y = parseInt(i/16) * yFactor;\n                var x = (i % 16) * xFactor;\n                let draw = false;\n                if(this.props.pixelData[key]['useMap'][i])\n                    draw = true;\n                if(draw){\n                    let rgb = get_rgb(pixels[i]);\n                    ctx.fillStyle = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n                    ctx.fillRect(x,y, xFactor, yFactor);\n                }\n                else if(invert){\n                    ctx.fillStyle = `rgb(0, 0, 0)`;\n                    ctx.fillRect(x,y, xFactor, yFactor);\n                }\n            }\n            this.setState({canvasRendered:true});\n        }\n    }\n  }\n\n  renderAttributeGrid() {\n\n    const els = [];\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        let remaining = 'loading';\n        let initial = 'loading';\n       var category;\n       if (this.props.attrData){\n            let attrData = this.props.attrData[key];\n            if (attrData){\n                remaining = attrData['remainingGenePool'];\n                initial = attrData['initialGenePool'];\n                category = attrData['category'];\n            }\n        }\n        if (this.state.attrFilter==='all' || this.state.attrFilter===category){\n            els.push(<Card key={key} style={{textAlign:'center', minWidth: \"10rem\", maxWidth: \"10rem\", borderColor:'#008080', marginBottom: '1%', marginRight:'1%'}}><Card.Body><Card.Title>{key.replace(/([A-Z])/g, ' $1')}</Card.Title><canvas width='128px' height='128px' style={{margin:'0', padding:'0', width:'100%'}} ref={this[`ref_${key}`]}/><Card.Text>{remaining}/{initial}</Card.Text></Card.Body></Card>);\n        }\n    }\n        return (\n            <CardDeck style={{display:'flex', flexWrap:'wrap'}}>\n            {els}\n            </CardDeck>\n        );\n    }\n\n  onChangeFilter(e){\n    this.setState({attrFilter:e.target.value})\n    this.drawCanvas();\n  }\n\n  render() {\n    return (\n       <div style={{width:'80%', margin: '0 auto'}}>\n       <div style={{marginLeft:'1%'}}>\n        Attribute Filter {\" \"}\n       <select onChange={this.onChangeFilter.bind(this)} style={{margin: '0 auto'}}>\n        {['all'].concat(Object.keys(categoriesToAttributes)).map(num => <option value={num} key={num}>{num}</option>)}\n        </select>\n        </div>\n        <br />\n        {this.renderAttributeGrid()}\n        </div>\n    );\n  }\n\n}\n","import React from \"react\";\n\nimport {Card, CardDeck, Tooltip, OverlayTrigger} from 'react-bootstrap';\nimport {draw_villain} from \"../helper.js\";\nimport { Link } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\n\nconst MAX_VILLAINS = 100;\n\nexport class Villains extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n        canvasRendered : false\n    }\n\n    this.state = this.initialState;\n    for (var i = 0;i < MAX_VILLAINS; i++) {\n        this[`ref_${i}`] = React.createRef();\n    }\n  }\n\n  componentDidUpdate() {\n    this.drawCanvas(true);\n  }\n\n  componentDidMount() {\n    this.drawCanvas();\n  }\n\n  drawCanvas(force=false){\n    if (!this.props.pixelData || (!force && this.state.canvasRendered))\n        return;\n    for (let i = 0;i < this.props.villains.length; i++) {\n        const canvas = this[`ref_${i}`].current;\n        if (!!canvas && this.props.pixelData)\n        {\n            const ctx = canvas.getContext(\"2d\");\n            const villain = this.props.villains[i];\n            // assume square canvas!\n            draw_villain(ctx, villain, this.props.pixelData, ctx.canvas.width/16);\n            if(!this.state.canvasRendered)\n                this.setState({canvasRendered:true});\n        }\n    }\n  }\n\n  renderVillainGrid() {\n    const renderTooltip = props => (\n        <Tooltip {...props}>Genesis BV</Tooltip>\n    );\n    const els = [];\n    for (let i = 0 ;i < this.props.villains.length; i++) {\n        let style = {minWidth: \"10rem\", maxWidth: \"10rem\"}\n        style['backgroundColor'] = 'white';\n        style['borderColor'] = '#008080';\n        style['borderWidth'] = '2px';\n        style['marginBottom'] = '1%';\n        style['marginRight'] = '1%';\n        const v = this.props.villains[i];\n        let showToolTip = false;\n        if(!this.props.isMuseum){\n            let titleDiv = <div> BV {v.id} </div>;\n            if (v.owner === 'valhalla'){\n                style['backgroundColor'] = 'grey';\n                showToolTip = true;\n                titleDiv = <OverlayTrigger placement=\"top\" overlay={<Tooltip>In Valhalla< /Tooltip>}>{titleDiv}</OverlayTrigger>;\n            }\n            else if (v.sacrificeAddr === ethers.constants.AddressZero){\n                style['backgroundColor'] = 'yellow';\n                showToolTip = true;\n                titleDiv = <OverlayTrigger placement=\"top\" overlay={<Tooltip>Genesis BV< /Tooltip>}>{titleDiv}</OverlayTrigger>;\n            }\n            els.push(\n                    <Card key={i} style={style}>\n                    <Card.Body>\n                    <Card.Title>\n                    {titleDiv}\n                    </Card.Title>\n                    <canvas width='128px' height='128px' style={{width:'100%'}} ref={this[`ref_${i}`]}/>\n                    <Card.Text>\n                    </Card.Text>\n                    <Link to={'/villain/' + v.id}>Details</Link>\n                    </Card.Body>\n                    </Card>);\n        }\n        else{\n            if (ethers.constants.AddressZero == v.sacrificeAddr)\n                continue;\n            els.push(\n                    <Card key={i} style={style}>\n                    <Card.Body>\n                    <Card.Title>\n                        Sacrifice {v.id}\n                    </Card.Title>\n                    <Card.Text>\n                    Sacrifice Address: {v.sacrificeAddr}<br />\n                    Sacrifice Id: {v.sacrificeId}<br />\n                    </Card.Text>\n                    </Card.Body>\n                    </Card>);\n        }\n    }\n        return (\n            <CardDeck style={{display:'flex', flexWrap:'wrap'}}>\n            {els}\n            </CardDeck>\n        );\n    }\n\n  render() {\n    return (\n       <div style={{width:'80%', margin: '0 auto'}}>\n        {this.renderVillainGrid()}\n        </div>\n    );\n  }\n\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dapp } from \"./components/Dapp\";\n\n// We import bootstrap here, but you can remove if you want\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// This is the entry point of your application, but it just renders the Dapp\n// react component. All of the logic is contained in it.\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dapp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}