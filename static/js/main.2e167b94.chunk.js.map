{"version":3,"sources":["components/NoWalletDetected.js","components/NetworkErrorMessage.js","components/WalletStatus.js","components/HelperNFT.js","components/Login.js","helper.js","components/Villain.js","components/RecruitMember.js","components/Events.js","components/Dapp.js","components/AttributePage.js","components/Villains.js","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","WalletStatus","address","statusData","connectWallet","networkError","val","blockNumber","currentBlock","cachedBlock","Container","Row","Col","style","fontSize","HelperNFT","awardItem","value","event","Login","loginFunc","useState","password","setPassword","width","margin","name","required","onChange","minMaxRGB","Math","min","max","get_rgb","rgb","adj","r","g","b","ret","draw_villain","ctx","villain","pixelData","factor","j","length","attr","numBlessed","numPunished","pixels","z","useMap","y","parseInt","x","fillStyle","fillRect","update_cache","attrName","prevState","Villain","villainData","userAddress","tribulate","valhalla","pricing","vId","useParams","canvasRendered","setCanvasRendered","canvasRef","useRef","useEffect","canvas","current","getContext","drawCanvas","attrs","s","split","push","textAlign","border","background","height","ref","RecruitMember","recruitMember","isApproved","getApproval","defaultValue","approved","setApproved","sAddr","sId","state","setState","inputChanged","checkApproval","ethers","utils","isAddress","then","result","constants","AddressZero","Events","data","radioValue","setRadioValue","showData","ButtonGroup","toggle","map","radio","idx","ToggleButton","variant","checked","e","currentTarget","classes","keyField","rows","columns","tableLayout","color","AttributePage","props","initialState","attrFilter","init","Object","keys","contractAddresses","key","this","React","createRef","xFactor","yFactor","invert","includes","i","draw","els","category","remaining","initial","attrData","Card","minWidth","maxWidth","borderColor","marginBottom","marginRight","Body","Title","replace","padding","Text","CardDeck","display","flexWrap","marginLeft","onChangeFilter","bind","concat","categoriesToAttributes","num","renderAttributeGrid","Component","Villains","force","villains","v","owner","id","to","overflowX","renderVillainGrid","PASSWORD","CHAIN_ID_MAP","1","3","DYNAMIC_CACHE_VARIABLES","VALHALLA_COLUMNS","RECRUITS_COLUMNS","TRIBULATIONS_COLUMNS","attributesToCategories","Dapp","localStorage","getItem","clear","setItem","undefined","cachedPixelData","JSON","parse","isAuthenticated","storedPwd","bcrypt","compareSync","tokenData","selectedAddress","balance","txBeingSent","transactionError","existingVillains","userVillains","events","valhallas","recruits","tribulations","authenticated","varName","cachedVal","cachedBlockNumber","document","body","backgroundColor","window","ethereum","on","networkId","console","log","_connectWallet","pwd","Navbar","expand","Brand","Image","src","Toggle","aria-controls","Collapse","Nav","Link","as","NavDropdown","title","Item","Divider","_dismissNetworkError","path","_awardItem","_recruitMember","nftContractAddr","_isApproved","_getApproval","exact","children","memberId","_tribulate","minAmt","_valhalla","position","_authenticate","_stopPollingData","addr","contractArtifact","Contract","abi","_provider","getSigner","a","request","method","_checkNetwork","providers","Web3Provider","_helperContracts","_getHelperContracts","_setupContractData","_bvContract","makeContract","BitVillainsArtifact","_initialize","tx","_getPixelData","pricePaid","nextPrintPrice","nextBurnPrice","membersAlive","reserve","eventKey","getAddress","formatEther","toString","_memberToRecruitedMap","priceReceived","nextRecruitPrice","nextValhallaPrice","who","isPunishment","stringify","_updateDynamicData","_updateDynamicDataInterval","setInterval","MILLISECONDS_IN_SECOND","newAddress","_resetState","_intializeEthers","_token","tokenContractAddress","Token","TokenArtifact","queryFilter","filters","MemberRecruited","eventResults","args","MemberToValhalla","Tribulation","_pollDataInterval","_updateBalance","clearInterval","symbol","balanceOf","helperContracts","BVTest721Artifact","BVTest1155Artifact","attrContracts","contract","AttributeArtifact","_attrContracts","attrManContracts","AttributeManagerArtifact","_attrManContracts","getPixels","getPixelMap","m_attrs","m_sizes","size","m_sizes_original","oSize","numVillains","getMemberAttributes","error","m_attrMap","attrMap","getValhallaPrice","vp","getPunishedBlessedPrice","tp","getBlockNumber","ev","nftContract","ERC721Artifact","getApproved","_dismissTransactionError","_sendTx","approve","recruitMemberWith721","parseEther","func","hash","toast","success","wait","receipt","status","Error","code","networkVersion","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e167b94.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {Container, Row, Col} from 'react-bootstrap';\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function WalletStatus({ address, statusData, connectWallet, networkError, dismiss }) {\n  let val = (\n          <div>\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button> \n          </div>\n  );\n  const blockNumber = statusData.currentBlock || 'loading';\n  const cachedBlock = statusData.cachedBlock || 'loading';\n  if(address){\n    val = (<div>Connected Wallet: {address}</div>);\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n        <Container>\n        <Row>\n          <Col>\n            <div className=\"col-6 p-4 text-center\">\n              {val}\n            </div>\n          {/* Metamask network should be set to Localhost:8545. */}\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n          </Col>\n          <Col style={{fontSize:'15px'}}>\n            Latest Block: {blockNumber}<br />\n            Displayed Block: {cachedBlock}\n          </Col>\n        </Row>\n        </Container>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function HelperNFT({ awardItem, address }) {\n  return (\n    <div>\n      <h4>HelperNFT</h4>\n      <form\n      >\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\"\n            value=\"HelperNFT\" \n            type=\"button\"\n            onClick={(event) => {\n              if (address) {\n                awardItem(address);\n              }\n            }}\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, {useState} from \"react\";\n\nexport function Login({ loginFunc }) {\n  const [password, setPassword] = useState('')\n  return (\n    <div style={{width:'10%', margin: '0 auto'}}>\n      <h4>Login BitVillains Beta</h4>\n      <form\n      >\n        <div className=\"form-group\">\n          <input className=\"form-control\" type=\"text\" name=\"password\" required\n          onChange={(event)=>{setPassword(event.target.value)}}\n          />\n          <br />\n          <input className=\"btn btn-primary\"\n            value=\"Login\" \n            type=\"button\"\n            onClick={(event) => {\n              loginFunc(password);\n            }}\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","function minMaxRGB(val){\n    return Math.min(Math.max(0, val), 255);\n}\n\nexport function get_rgb(rgb, adj=0){\n    const r = (rgb>>16)&0x0ff;\n    const g = (rgb>>8)&0x0ff;\n    const b = (rgb)&0x0ff;\n    const ret = [minMaxRGB(r+adj), minMaxRGB(g+adj), minMaxRGB(b+adj)]\n    return ret;\n}\n\nexport function draw_villain(ctx, villain, pixelData, factor=5){\n    let size = 16;\n    let w = size * factor;\n    let h = size * factor;\n    for (let j = 0;j< villain['attrs'].length; j++){\n        const attr = villain['attrs'][j];\n        const numBlessed = villain['numBlessed'];\n        const numPunished = villain['numPunished'];\n        const adj = numBlessed - numPunished -1;\n        let pixels = pixelData[attr.name].pixels;\n        for (var z = 0;z < pixels.length; z++)\n        {\n            if(!pixelData[attr.name].useMap[z])\n                continue;\n            var y = parseInt(z/16) * factor;\n            var x = z % 16 * factor;\n            let rgb = get_rgb(pixels[z], adj);\n            ctx.fillStyle = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n            ctx.fillRect(x,y, factor, factor);\n        }\n    }\n\n\n}\n\nexport function update_cache(attrName, val, prevState){\n    const statusData = {...prevState.statusData};\n    statusData[attrName] = val;\n    return {statusData};\n}\n","import React, {useState, useRef, useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {draw_villain} from \"../helper.js\";\n\nconst IMG_SIZE = 384\nexport function Villain({villainData, pixelData, userAddress, tribulate, valhalla, pricing}) {\n  let {vId} = useParams();\n  const [canvasRendered, setCanvasRendered] = useState(false);\n  const canvasRef = useRef();\n  const villain = villainData[vId];\n\n  function drawCanvas(){\n    const canvas = canvasRef.current;\n    if(canvas && !canvasRendered){\n        draw_villain(canvas.getContext('2d'), villain, pixelData, canvas.getContext(\"2d\").canvas.width/16);\n        setCanvasRendered(true);\n    }\n  }\n\n  useEffect(() =>{\n    drawCanvas();\n  });\n  if(!villain){\n    return(<div>\n      <h4>Villain {vId} not found!</h4>\n    </div>);\n  }\n  const attrs = [];\n  for (const attr of villain['attrs']){\n    let s = \"\";\n    for (const w of attr['name'].split(/(?=[A-Z])/))\n        s+=w+\" \";\n    attrs.push(<div key={s}>{s}</div>);\n  }\n  return (\n    <div style={{width:IMG_SIZE*1.1, margin:'0 auto', textAlign:'center', border:'2px solid #008080', background:'white'}}>\n      <h4>Villain {vId}</h4>\n      <div><canvas height={IMG_SIZE} width={IMG_SIZE} ref={canvasRef} /></div>\n      <div>Owner: {villain['owner']}</div>\n      <div>{attrs}</div>\n      <div>Times Blessed: {villain['numBlessed']}</div>\n      <div>Times Punished: {villain['numPunished']}</div>\n      {villain['owner'] === userAddress &&\n          <div>\n          <div>\n          <input className=\"btn btn-primary\" type=\"button\" value=\"Tribulate\"\n             onClick={()=>tribulate(vId)}/>\n        </div>\n          <div>\n          <input className=\"btn btn-primary\" type=\"button\" value={\"Valhalla for \"+pricing.valhalla+\" ETH\"}\n             onClick={()=>valhalla(vId, 0)}/>\n        </div>\n        <br />\n        </div>\n      }\n    </div>\n  );\n}\n","import React, {useState} from \"react\";\nimport { ethers } from \"ethers\";\n\nexport function RecruitMember({ recruitMember, isApproved, getApproval, pricing, defaultValue}) {\n  const [approved, setApproved] = useState(false);\n  const [state, setState] = useState({\n      sAddr: defaultValue,\n      sId: \"\"\n  });\n  \n  function inputChanged(event){\n      const val = event.target.value\n      setState({\n        ...state,\n        [event.target.name]: val\n      });\n      let sAddr = state.sAddr;\n      let sId = state.sId;\n      if(event.target.name === 'sAddr')\n          sAddr = val;\n      else if(event.target.name === 'sId')\n          sId = val;\n      checkApproval(sAddr, sId);\n  }\n\n  function checkApproval(sAddr, sId){\n      if(ethers.utils.isAddress(sAddr) && sId != \"\"){\n          isApproved(sAddr, sId).then((result)=>{\n            setApproved(result != ethers.constants.AddressZero);\n          });\n      }\n\n  }\n\n  function recruitMemberClicked(event){\n      if (state.sAddr && state.sId) {\n        recruitMember(state.sAddr, state.sId).then((result)=>{\n      });\n      }\n    }\n  function getApprovalClicked(event){\n      if (state.sAddr && state.sId) {\n        getApproval(state.sAddr, state.sId).then((result)=>{\n            checkApproval(state.sAddr, state.sId);\n        });\n      }\n    }\n\n  return (\n    <div>\n      <h4>RecruitMember</h4>\n      <form\n      >\n        <div className=\"form-group\">\n          <label>Sacrifice Contract address</label>\n          <input className=\"form-control\" type=\"text\" name=\"sAddr\" required\n            value={state.sAddr}\n            onChange={inputChanged}\n          />\n        </div>\n        {approved &&\n            <div>APPROVED</div>\n        }\n        {!approved &&\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"button\" value=\"GetApproval\"\n             onClick={getApprovalClicked}/>\n        </div>\n        }\n        <div className=\"form-group\">\n          <label>Sacrifice Id</label>\n          <input className=\"form-control\" type=\"number\" name=\"sId\" required onChange={inputChanged} value={state.sId}/>\n        </div>\n        {approved &&\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"button\" value=\"RecruitMember\"\n             onClick={recruitMemberClicked}/>\n        </div>\n        }\n      </form>\n    </div>\n  );\n}\n","import React, {useState} from \"react\";\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport {ButtonGroup, ToggleButton} from 'react-bootstrap';\nimport './Events.css';\n\nexport function Events({data}) {\n    const [radioValue, setRadioValue] = useState('recruits');\n    const radios = [\n        { name: 'Recruits', value: 'recruits' },\n        { name: 'Valhalla', value: 'valhallas' },\n        { name: 'Tribulations', value: 'tribulations' },\n    ];\n    const showData = data[radioValue];\n    return (\n        <div>\n        <ButtonGroup className='EventsControlButton' toggle>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            type=\"radio\"\n            variant=\"secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n        </ButtonGroup>\n        <BootstrapTable classes=\"EventsTable\" keyField='eventKey' data={ showData.rows } columns={ showData.columns } style={{tableLayout:'auto', color:'blue'}}/>\n        </div>\n    );\n}\n","import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\nimport bcrypt from 'bcryptjs';\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../contracts/Token.json\";\nimport AttributeArtifact from \"../contracts/Attribute.json\";\nimport AttributeManagerArtifact from \"../contracts/AttributeManager.json\";\nimport BVTest721Artifact from \"../contracts/BVTest721.json\";\nimport BVTest1155Artifact from \"../contracts/BVTest1155.json\";\nimport ERC721Artifact from \"../contracts/ERC721.json\";\nimport BitVillainsArtifact from \"../contracts/BitVillains.json\";\nimport tokenContractAddress from \"../contracts/contract-address.json\";\nimport contractAddresses from \"../contracts/addresses.json\";\nimport categoriesToAttributes from \"../categories.json\"\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { WalletStatus } from \"./WalletStatus\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { HelperNFT } from \"./HelperNFT\";\nimport { Login } from \"./Login\";\nimport { Villain } from \"./Villain\";\nimport { RecruitMember } from \"./RecruitMember\";\nimport { Events } from \"./Events.js\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\nimport { AttributePage } from \"./AttributePage\";\nimport { Villains } from \"./Villains\";\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button, Card, CardDeck, Image} from 'react-bootstrap';\nimport {get_rgb, update_cache} from \"../helper.js\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Dapp.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nconst PASSWORD = \"$2a$10$eRHp8Jx2EoWK5x4BUFB2iOBWijwXObljzA9ZyZoUutnFCfzl.2Ai.\"\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\nconst ROPSTEN_NETWORK_ID = '3';\nconst MILLISECONDS_IN_SECOND = 1000;\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\nconst ERROR_CODE_SACRIFICE_ALREADY_APPROVED = -32603;\nconst CHAIN_ID_MAP = {1: 'Mainnet', 3: 'Ropsten'}\nconst CURRENT_CHAIN_ID = 3;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nconst DYNAMIC_CACHE_VARIABLES = ['existingVillains', 'userVillains', 'attrData', 'pricing', 'cachedBlockNumber'];\nconst VALHALLA_COLUMNS = [\n    {'dataField': 'owner', 'text': 'Owner', style: {'width':'5px'}},\n    {'dataField': 'id', 'text': 'BV Id'},\n    {'dataField': 'priceReceived', 'text': 'Valhalla Price'},\n    {'dataField': 'nextRecruitPrice', 'text': 'Next Recruit Price'},\n    {'dataField': 'nextValhallaPrice', 'text': 'Next Valhalla Price'},\n    {'dataField': 'membersAlive', 'text': 'Members Alive'},\n    {'dataField': 'reserve', 'text': 'BV Reserve'}];\nconst RECRUITS_COLUMNS = [\n    {'dataField': 'to', 'text': 'Owner', style: {'width':'5px'}},\n    {'dataField': 'id', 'text': 'BV Id'},\n    {'dataField': 'pricePaid', 'text': 'Price Paid'},\n    {'dataField': 'nextPrintPrice', 'text': 'Next Print Price'},\n    {'dataField': 'nextBurnPrice', 'text': 'Next Burn Price'},\n    {'dataField': 'membersAlive', 'text': 'Members Alive'},\n    {'dataField': 'reserve', 'text': 'BV Reserve'}];\nconst TRIBULATIONS_COLUMNS = [\n    {'dataField': 'who', 'text': 'Owner', style: {'width':'5px'}},\n    {'dataField': 'id', 'text': 'BV Id'},\n    {'dataField': 'isPunishment', 'text': 'Is Punishment'},\n    {'dataField': 'numPunished', 'text': 'Times Punished'},\n    {'dataField': 'numBlessed', 'text': 'Times Blessed'}];\nlet attributesToCategories = {}\nfor (var key of Object.keys(categoriesToAttributes)) {\n    for (let i = 0; i < categoriesToAttributes[key].length; i++) {\n        attributesToCategories[categoriesToAttributes[key][i]] = key;\n    }\n}\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if(localStorage.getItem('contractAddress') != contractAddresses['BitVillains']){\n        localStorage.clear();\n        localStorage.setItem('contractAddress', contractAddresses['BitVillains']);\n    }\n\n    let pixelData = undefined;\n    const cachedPixelData = JSON.parse(localStorage.getItem(\"pixelData\"));\n\n    let isAuthenticated = false;\n    const storedPwd = localStorage.getItem(\"cachedPassword\");\n    if (storedPwd && bcrypt.compareSync(storedPwd, PASSWORD)){\n        isAuthenticated = true;\n    }\n    if(cachedPixelData && Object.keys(cachedPixelData) != 0)\n        pixelData = cachedPixelData;\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      canvasRendered: false,\n      existingVillains:  [],\n      userVillains: {},\n      pixelData: pixelData,\n      events: {\n          valhallas: {'rows': [], 'columns': VALHALLA_COLUMNS},\n          recruits: {'rows': [], 'columns': RECRUITS_COLUMNS},\n          tribulations: {'rows': [], 'columns': TRIBULATIONS_COLUMNS}\n      },\n      statusData: {},\n      authenticated: isAuthenticated\n    };\n    for (const varName of DYNAMIC_CACHE_VARIABLES){\n        const cachedVal = JSON.parse(localStorage.getItem(varName));  \n        if (cachedVal)\n            this.initialState[varName] = cachedVal;\n    }\n    // cachedBlock is last time in current session block was updated (metadata)\n    // cachedBlockNumber is the actual value set in the dynamic data array\n    this.initialState.statusData.cachedBlock = this.initialState.cachedBlockNumber;\n    this.state = this.initialState;\n  }\n  componentDidMount() {\n    document.body.style.backgroundColor = \"#D2D2D2\";\n    // We reset the dapp state if the network is changed\n    if (window.ethereum){\n        window.ethereum.on(\"chainChanged\", ([networkId]) => {\n          console.log('hi', networkId)\n          this.setState({networkId:networkId});\n          this._connectWallet();\n        });\n        this._connectWallet();\n    }\n  }\n\n  _authenticate(pwd){\n    /*var salt = bcrypt.genSaltSync(10);\n    var hash = bcrypt.hashSync(pwd, salt);\n    console.log(pwd);\n    console.log(hash);\n    */\n    if (bcrypt.compareSync(pwd, PASSWORD)){\n        console.log(\"AUTHENTICATED\");\n        this.setState({authenticated:true});\n        localStorage.setItem(\"cachedPassword\", pwd);\n    }\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if(!this.state.authenticated){\n      return <Login\n        loginFunc={(pwd) =>\n          this._authenticate(pwd)\n        }\n      />;\n    }\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n    if(this.state.networkId !== CURRENT_CHAIN_ID){\n        return(\n        <div>\n        <h1> BitVillains </h1>\n        <p> Please connect to the correct network ({CHAIN_ID_MAP[CURRENT_CHAIN_ID]}) for access</p>\n        </div>);\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the WalletStatus component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (<div />);\n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n\n    // If everything is loaded, we render the application.\n    return (\n      <Router>\n      <div>\n        <Navbar expand=\"sm\" style={{backgroundColor: 'black', color:'white'}}>\n          <Navbar.Brand href=\"#home\"><Image className=\"MainLogo d-inline-block align-top\" src={\"/logo1.png\"} /></Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mainNavBar\">\n              <Nav.Link as={Link} to=\"/index\">Home</Nav.Link>\n              <Nav.Link as={Link} to=\"/attributePool\">Attribute Pool</Nav.Link>\n              <Nav.Link as={Link} to=\"/recruitMember\">Recruit New Member</Nav.Link>\n              <Nav.Link as={Link} to=\"/helper\">Helper</Nav.Link>\n              <Nav.Link as={Link} to=\"/bitVillains\">Existing BVs</Nav.Link>\n              <Nav.Link as={Link} to=\"/userBitVillains\">My Bit Villains</Nav.Link>\n              <Nav.Link as={Link} to=\"/events\">Events</Nav.Link>\n              <NavDropdown title=\"Info\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n            <WalletStatus \n              address={this.state.selectedAddress}\n              statusData={this.state.statusData}\n              connectWallet={() => this._connectWallet()} \n              networkError={this.state.networkError}\n              dismiss={() => this._dismissNetworkError()}\n            />\n          </Navbar.Collapse>\n        </Navbar>\n        <div id=\"colorBar\" />\n        <br />\n\n      <Switch>\n      <Route path=\"/attributePool\">\n        <AttributePage pixelData={this.state.pixelData} attrData={this.state.attrData} />\n      </Route>\n      <Route path=\"/bitVillains\">\n      <Villains pixelData={this.state.pixelData} villains={this.state.existingVillains} />\n      </Route>\n      <Route path=\"/userBitVillains\">\n      <Villains pixelData={this.state.pixelData} villains={this.state.userVillains[this.state.selectedAddress]?? []} />\n      </Route>\n      <Route path='/helper'>\n          <HelperNFT\n            awardItem={(address) =>\n              this._awardItem(address)\n            }\n            address={this.state.selectedAddress}\n          />\n      </Route>\n      <Route path='/recruitMember'>\n          <RecruitMember\n            recruitMember={(sAddr, sId) =>\n              this._recruitMember(sAddr, sId)\n            }\n            isApproved={(nftContractAddr, sId) =>\n              this._isApproved(nftContractAddr, sId)\n            }\n            getApproval={(sAddr, sId) =>\n              this._getApproval(sAddr, sId)\n            }\n            pricing={this.state.pricing}\n            defaultValue={contractAddresses['BVTest721']}\n          />\n      </Route>\n      <Route exact path=\"/\">\n        <Redirect to=\"/index\" />\n      </Route>\n      <Route path=\"/index\">\n          <div>\n          Welcome to the home of BitVillains, patent pending\n          </div>\n      </Route>\n      <Route path=\"/events\">\n        <Events \n            data={this.state.events}\n        />\n      </Route>\n      <Route path=\"/villain/:vId\" children={<Villain villainData={this.state.existingVillains} pixelData={this.state.pixelData} userAddress={this.state.selectedAddress}\n            tribulate={(memberId) =>\n              this._tribulate(memberId)\n            }\n            valhalla={(memberId, minAmt) =>\n              this._valhalla(memberId, minAmt)\n            }\n            pricing={this.state.pricing} />} />\n      </Switch>\n      </div>\n      <ToastContainer position=\"bottom-right\" />\n      </Router>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n  makeContract(addr, contractArtifact){\n    return new ethers.Contract(\n      addr,\n      contractArtifact.abi,\n      this._provider.getSigner(0)\n    );\n}\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    this._helperContracts = this._getHelperContracts();\n    this._setupContractData();\n    this._bvContract = this.makeContract(contractAddresses['BitVillains'], BitVillainsArtifact);\n    this._initialize(selectedAddress);\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider.on(\"pending\", (tx) =>{\n        console.log('pending');\n        console.log(tx);\n    });\n    this._provider.on(\"block\", (blockNumber) => {\n        this.setState(prevState => update_cache('currentBlock', blockNumber, prevState));\n    })\n    this._getPixelData().then((pixelData)=>{;\n    // TODO this should be cleared up beacuse of the copy paste code. we should parse events in one function somewhow\n    this._bvContract.on(\"MemberRecruited\", (to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve) => {\n        const eventKey = `${to} ${id} ${pricePaid} ${nextPrintPrice} ${nextBurnPrice} ${membersAlive} ${reserve}`;\n        let recruits = this.state.events.recruits;\n        to = ethers.utils.getAddress(to);\n        id = parseInt(id);\n        pricePaid = ethers.utils.formatEther(parseInt(pricePaid).toString());\n        nextPrintPrice = ethers.utils.formatEther(parseInt(nextPrintPrice).toString());\n        nextBurnPrice = ethers.utils.formatEther(parseInt(nextBurnPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        this._memberToRecruitedMap[id] = {'to': to, 'id': id, 'pricePaid': pricePaid, 'nextBurnPrice': nextBurnPrice};\n        recruits['rows'].push({to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve, eventKey});\n        this.setState({recruits});\n    });\n    this._bvContract.on(\"MemberToValhalla\", (owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve) => {\n        const eventKey = `${owner} ${id} ${priceReceived} ${nextRecruitPrice} ${nextValhallaPrice} ${membersAlive} ${reserve}`;\n        id = parseInt(id);\n        priceReceived = ethers.utils.formatEther(parseInt(priceReceived).toString());\n        nextRecruitPrice = ethers.utils.formatEther(parseInt(nextRecruitPrice).toString());\n        nextValhallaPrice = ethers.utils.formatEther(parseInt(nextValhallaPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        let valhallas = this.state.events.valhallas;\n        valhallas['rows'].push({owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve});\n        this._memberToRecruitedMap[id] = {'to': 'valhalla'};\n        this.setState({valhallas});\n    });\n    this._bvContract.on(\"Tribulation\", (who, id, isPunishment, numPunished, numBlessed) => {\n        const eventKey = `${who} ${id} ${isPunishment} ${numPunished} ${numBlessed}`;\n        who = ethers.utils.getAddress(who);\n        id = parseInt(id);\n        numPunished = parseInt(numPunished).toString();\n        numBlessed = parseInt(numBlessed).toString();\n        let tribulations = this.state.events.tribulations;\n        tribulations['rows'].push({who, id, isPunishment, numPunished, numBlessed, eventKey});\n        this.setState({tribulations});\n    });\n    if(!this.state.pixelData){\n      localStorage.setItem(\"pixelData\", JSON.stringify(pixelData));\n      this.setState({pixelData});\n    }\n    });\n    this._updateDynamicData(selectedAddress);\n    this._updateDynamicDataInterval = setInterval(() => this._updateDynamicData(selectedAddress), MILLISECONDS_IN_SECOND * 30);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: ethers.utils.getAddress(userAddress),\n    });\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n  }\n\n  async _intializeEthers() {\n    \n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._token = new ethers.Contract(\n      tokenContractAddress.Token,\n      TokenArtifact.abi,\n      this._provider.getSigner(0)\n    );\n\n    this._memberToRecruitedMap = {}\n    let eventResults = await this._bvContract.queryFilter(this._bvContract.filters.MemberRecruited());\n    let events = {...this.state.events};\n    events.recruits['rows'] = [];\n    events.valhallas['rows'] = [];\n    events.tribulations['rows'] = [];\n    for(const event of eventResults){\n        const eventKey = `${event.args}`;\n        let [to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve] = event.args;\n        to = ethers.utils.getAddress(to);\n        id = parseInt(id);\n        pricePaid = ethers.utils.formatEther(parseInt(pricePaid).toString());\n        nextPrintPrice = ethers.utils.formatEther(parseInt(nextPrintPrice).toString());\n        nextBurnPrice = ethers.utils.formatEther(parseInt(nextBurnPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        this._memberToRecruitedMap[id] = {'to': to, 'id': id, 'pricePaid': pricePaid, 'nextBurnPrice': nextBurnPrice};\n        events.recruits['rows'].push({to, id, pricePaid, nextPrintPrice, nextBurnPrice, membersAlive, reserve, eventKey});\n    }\n    eventResults = await this._bvContract.queryFilter(this._bvContract.filters.MemberToValhalla());\n    for(const event of eventResults){\n        const eventKey = `${event.args}`;\n        let [owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve] = event.args;\n        id = parseInt(id);\n        priceReceived = ethers.utils.formatEther(parseInt(priceReceived).toString());\n        nextRecruitPrice = ethers.utils.formatEther(parseInt(nextRecruitPrice).toString());\n        nextValhallaPrice = ethers.utils.formatEther(parseInt(nextValhallaPrice).toString());\n        membersAlive = parseInt(membersAlive);\n        reserve = ethers.utils.formatEther(parseInt(reserve).toString());\n        events.valhallas['rows'].push({owner, id, priceReceived, nextRecruitPrice, nextValhallaPrice, membersAlive, reserve, eventKey})\n        this._memberToRecruitedMap[id] = {'to': 'valhalla'}\n    }\n    eventResults = await this._bvContract.queryFilter(this._bvContract.filters.Tribulation());\n    for(const event of eventResults){\n        const eventKey = `${event.args}`;\n        let [who, id, isPunishment, numPunished, numBlessed] = event.args;\n        who = ethers.utils.getAddress(who);\n        id = parseInt(id);\n        numPunished = parseInt(numPunished).toString();\n        numBlessed = parseInt(numBlessed).toString();\n        events.tribulations['rows'].push({who, id, isPunishment, numPunished, numBlessed, eventKey})\n    }\n    this.setState(events)\n\n  }\n\n  // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n\n    this.setState({ tokenData: { name, symbol } });\n  }\n\n  async _updateBalance() {\n    if(this.state.selectedAddress) {\n        const balance = await this._token.balanceOf(this.state.selectedAddress);\n        this.setState({ balance });\n    }\n  }\n\n  _getHelperContracts() {\n    let helperContracts = {};\n    helperContracts['erc721'] = this.makeContract(contractAddresses['BVTest721'], BVTest721Artifact);\n    helperContracts['erc1155'] = this.makeContract(contractAddresses['BVTest1155'], BVTest1155Artifact);\n    return helperContracts;\n  }\n\n  _setupContractData(){\n    let attrContracts = {};\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        let addr = contractAddresses['Attribute'][key];\n        const contract = new ethers.Contract(\n          addr,\n          AttributeArtifact.abi,\n          this._provider.getSigner(0)\n        );\n        attrContracts[key] = contract;\n        attrContracts[addr] = contract;\n    }\n    this._attrContracts = attrContracts;\n    let attrManContracts = {}\n    for (var key of Object.keys(contractAddresses['AttributeManager'])) {\n        let addr = contractAddresses['AttributeManager'][key];\n        attrManContracts[key] = new ethers.Contract(\n          addr,\n          AttributeManagerArtifact.abi,\n          this._provider.getSigner(0)\n        );\n        let manAttrs = []\n        let idx = 0;\n    }\n    this._attrManContracts = attrManContracts;\n  }\n\n  async _getPixelData() {\n    let pixelData = {};\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        if(!this.state.pixelData)\n            pixelData[key] = {\n                'pixels': await this._attrContracts[key].getPixels(),\n                'useMap': await this._attrContracts[key].getPixelMap()\n            };\n    }\n    return pixelData;\n  }\n  async _updateDynamicData(userAddress) {\n    try{\n        let data = {};\n        data['attrData'] = {};\n        for (var key of Object.keys(contractAddresses['AttributeManager'])) {\n            let addr = contractAddresses['AttributeManager'][key];\n            let attrs = categoriesToAttributes[key];\n            for (var i =0; i < attrs.length; i++){\n                let addr = await this._attrManContracts[key].m_attrs(i);\n                let size = await this._attrManContracts[key].m_sizes(i);\n                let oSize = await this._attrManContracts[key].m_sizes_original(i);\n                let contract = this._attrContracts[addr];\n                let name = await contract.name();\n                data['attrData'][name] = {};\n                data['attrData'][name]['remainingGenePool'] = parseInt(size['_hex']);\n                data['attrData'][name]['initialGenePool'] = parseInt(oSize['_hex']);\n                data['attrData'][name]['category'] = attributesToCategories[attrs[i]];\n            }\n        }\n        data['existingVillains'] = [];\n        data['userVillains'] = {};\n        const numVillains = 10000;\n        var i = 0;\n        for (i = 0; i < numVillains; i++){\n            let attrs = await this._bvContract.getMemberAttributes(i);\n            if (attrs.length < 1)\n                break;\n            let villain = {}\n            villain['attrs'] = [];\n            for (var j = 0; j < attrs.length; j++){\n                const attr = this._attrContracts[attrs[j]];\n                villain['attrs'].push({'name': await attr.name()});\n            }\n            let owner;\n            try{\n                // owner = await this._bvContract.ownerOf(i);\n                owner = this._memberToRecruitedMap[i].to;\n                // await this._bvContract.balanceOf(userAddress);\n            } catch (error){\n            }\n            villain['owner'] = owner;\n            const attrMap = await this._bvContract.m_attrMap(i);\n            const sacrificeId = 0;//await this._bvContract.m_sacrificeMap(i);\n            villain['numBlessed'] = attrMap.numBlessed;\n            villain['numPunished'] = attrMap.numPunished;\n            villain['id'] = i;\n            villain['sacrificeId'] = sacrificeId;\n            data['existingVillains'].push(villain);\n            if(!(owner in data['userVillains']))\n                data['userVillains'][owner] = [];\n            data['userVillains'][owner].push(villain);\n        }\n        data['pricing'] = {};\n        let vp = await this._bvContract.getValhallaPrice();\n        let tp = await this._bvContract.getPunishedBlessedPrice();\n        // let rp = await this._bvContract.getRecruitPrice(i);\n        data['pricing']['valhalla'] = ethers.utils.formatEther(parseInt(vp['_hex']).toString());\n        data['pricing']['tribulate'] = ethers.utils.formatEther(parseInt(tp['_hex']).toString());\n        // data['pricing']['recruit'] = ethers.utils.formatEther(parseInt(rp['_hex']).toString());\n        data['cachedBlockNumber'] = await this._provider.getBlockNumber();\n        this.setState(prevState => update_cache('cachedBlock', data['cachedBlockNumber'], prevState));\n\n        this.setState(data);\n        for (var key of Object.keys(data)){\n            localStorage.setItem(key, JSON.stringify(data[key]));\n        }\n    } catch(error){\n        console.log(error)\n        console.log('caught error while updating dynamic data');\n    }\n  }\n\n  _setCurrentUserVillains(){\n    const ev = this.state.data['existingVillains'];\n    for(var i=0; i<ev.length; i++){\n\n    }\n\n  }\n\n  async _isApproved(nftContractAddr, sId){\n    try {\n        const nftContract =  this.makeContract(nftContractAddr, ERC721Artifact);\n        return await nftContract.getApproved(sId);\n    } catch (error){\n        return false;\n    }\n  }\n\n  async _awardItem(to) {\n    this._dismissTransactionError();\n    await this._sendTx(this._helperContracts['erc721'].awardItem, to);\n  }\n\n  async _getApproval(sAddr, sId){\n    this._dismissTransactionError();\n    await this._sendTx(this._helperContracts['erc721'].approve, this._bvContract.address, sId);\n  }\n\n  async _recruitMember(sAddr, sId) {\n    this._dismissTransactionError();\n    return await this._sendTx(this._bvContract.recruitMemberWith721, sAddr, sId, {value:ethers.utils.parseEther(\"0.5\")});\n  }\n\n  async _tribulate(memberId) {\n    this._dismissTransactionError();\n    return await this._sendTx(this._bvContract.tribulate, memberId, {value:ethers.utils.parseEther(this.state.pricing['tribulate'])});\n  }\n\n  async _valhalla(memberId, minAmt) {\n    this._dismissTransactionError();\n    return await this._sendTx(this._bvContract.valhalla, memberId, minAmt);\n  }\n\n  async _sendTx(func, ...args){\n    try {\n      const tx = await func(...args);\n      this.setState({ txBeingSent: tx.hash });\n      toast.success(\"Transaction submited! Follow its progress with your wallet\");\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n      toast.success(\"Transaction mined! Block Number: \" + receipt.blockNumber);\n      await this._updateDynamicData(this.state.selectedAddress);\n\n      await this._updateBalance();\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        toast.error(\"Transaction was defined rejected by your wallet, please try again.\")\n      }\n      else if (error.code === -32603) {\n        toast.error(\"Transaction failed due to initial gas issue\");\n      }\n      else if (error.code === \"CALL_EXCEPTION\") {\n        toast.error(\"Transaction failed due to call exception, please check your gas limit and try again\");\n      }\n      else if (error.error.code === -32603) {\n        toast.error(error.error.message)\n      }\n\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    let ret = false;\n    const networkId = parseInt(window.ethereum.networkVersion);\n    if ( networkId === CURRENT_CHAIN_ID) {\n      ret = true;\n    }\n    this.setState({ \n      networkId: networkId\n    });\n    if(!ret){\n        this.setState({ \n          networkError: 'Please connect Metamask to Hardhat or Ropsten network',\n        });\n    }\n\n    return ret;\n  }\n}\n","import React from \"react\";\nimport contractAddresses from \"../contracts/addresses.json\";\nimport categoriesToAttributes from \"../categories.json\"\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button, Card, CardDeck} from 'react-bootstrap';\nimport {get_rgb} from \"../helper.js\";\n\nexport class AttributePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n        canvasRendered : false,\n        attrFilter: 'all'\n    }\n\n    this.state = this.initialState;\n    this.init();\n  }\n\n  init(){\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        this[`ref_${key}`] = React.createRef();\n    }\n\n  }\n\n  componentDidMount() {\n    this.drawCanvas();\n  }\n\n  componentDidUpdate() {\n    this.drawCanvas();\n  }\n\n  drawCanvas() {\n    if (!this.props.pixelData || this.state.canvasRendered)\n        return;\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        const canvas = this[`ref_${key}`].current;\n        if (!!canvas)\n        {\n            const ctx = canvas.getContext(\"2d\");\n            let size = 16;\n            let xFactor = ctx.canvas.width/16;\n            let yFactor = ctx.canvas.height/16;\n            let pixels = this.props.pixelData[key]['pixels'];\n            let invert = false;\n            if(key.includes('White'))\n                invert = true;\n            for (var i = 0;i < pixels.length; i++)\n            {\n                var y = parseInt(i/16) * yFactor;\n                var x = (i % 16) * xFactor;\n                let draw = false;\n                if(this.props.pixelData[key]['useMap'][i])\n                    draw = true;\n                if(draw){\n                    let rgb = get_rgb(pixels[i]);\n                    ctx.fillStyle = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n                    ctx.fillRect(x,y, xFactor, yFactor);\n                }\n                else if(invert){\n                    ctx.fillStyle = `rgb(0, 0, 0)`;\n                    ctx.fillRect(x,y, xFactor, yFactor);\n                }\n            }\n            this.setState({canvasRendered:true});\n        }\n    }\n  }\n\n  renderAttributeGrid() {\n\n    const els = [];\n    for (var key of Object.keys(contractAddresses['Attribute'])) {\n        let remaining = 'loading';\n        let initial = 'loading';\n       var category;\n       if (this.props.attrData){\n            let attrData = this.props.attrData[key];\n            if (attrData){\n                remaining = attrData['remainingGenePool'];\n                initial = attrData['initialGenePool'];\n                category = attrData['category'];\n            }\n        }\n        if (this.state.attrFilter==='all' || this.state.attrFilter===category){\n            els.push(<Card key={key} style={{textAlign:'center', minWidth: \"10rem\", maxWidth: \"10rem\", borderColor:'#008080', marginBottom: '1%', marginRight:'1%'}}><Card.Body><Card.Title>{key.replace(/([A-Z])/g, ' $1')}</Card.Title><canvas width='128px' height='128px' style={{margin:'0', padding:'0', width:'100%'}} ref={this[`ref_${key}`]}/><Card.Text>{remaining}/{initial}</Card.Text></Card.Body></Card>);\n        }\n    }\n        return (\n            <CardDeck style={{display:'flex', flexWrap:'wrap'}}>\n            {els}\n            </CardDeck>\n        );\n    }\n\n  onChangeFilter(e){\n    this.setState({attrFilter:e.target.value})\n    this.drawCanvas();\n  }\n\n  render() {\n    return (\n       <div style={{width:'80%', margin: '0 auto'}}>\n       <div style={{marginLeft:'1%'}}>\n        Attribute Filter {\" \"}\n       <select onChange={this.onChangeFilter.bind(this)} style={{margin: '0 auto'}}>\n        {['all'].concat(Object.keys(categoriesToAttributes)).map(num => <option value={num} key={num}>{num}</option>)}\n        </select>\n        </div>\n        <br />\n        {this.renderAttributeGrid()}\n        </div>\n    );\n  }\n\n}\n","import React from \"react\";\n\nimport {Card, CardDeck} from 'react-bootstrap';\nimport {draw_villain} from \"../helper.js\";\nimport { Link } from \"react-router-dom\";\n\nconst MAX_VILLAINS = 100;\n\nexport class Villains extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n        canvasRendered : false\n    }\n\n    this.state = this.initialState;\n    for (var i = 0;i < MAX_VILLAINS; i++) {\n        this[`ref_${i}`] = React.createRef();\n    }\n  }\n\n  componentDidUpdate() {\n    this.drawCanvas(true);\n  }\n\n  componentDidMount() {\n    this.drawCanvas();\n  }\n\n  drawCanvas(force=false){\n    if (!this.props.pixelData || (!force && this.state.canvasRendered))\n        return;\n    for (let i = 0;i < this.props.villains.length; i++) {\n        const canvas = this[`ref_${i}`].current;\n        if (!!canvas && this.props.pixelData)\n        {\n            const ctx = canvas.getContext(\"2d\");\n            const villain = this.props.villains[i];\n            // assume square canvas!\n            draw_villain(ctx, villain, this.props.pixelData, ctx.canvas.width/16);\n            if(!this.state.canvasRendered)\n                this.setState({canvasRendered:true});\n        }\n    }\n  }\n\n  renderVillainGrid() {\n\n    const els = [];\n    for (let i = 0 ;i < this.props.villains.length; i++) {\n        let style = {minWidth: \"10rem\", maxWidth: \"10rem\"}\n        style['backgroundColor'] = 'white';\n        style['borderColor'] = '#008080';\n        style['borderWidth'] = '2px';\n        style['marginBottom'] = '10px';\n        const v = this.props.villains[i];\n        if (v.owner === 'valhalla')\n            style['backgroundColor'] = 'grey';\n        els.push(\n                <Card key={i} style={style}>\n                <Card.Body>\n                <Card.Title>\n                    BV {v.id}\n                </Card.Title>\n                <canvas width='128px' height='128px' style={{width:'100%'}} ref={this[`ref_${i}`]}/>\n                <Card.Text>\n                </Card.Text>\n                <Link to={'/villain/' + v.id}>Details</Link>\n                </Card.Body>\n                </Card>)\n    }\n        return (\n            <CardDeck style={{marginLeft:'0px', marginRight:'0px', overflowX:'hidden'}}>\n            {els}\n            </CardDeck>\n        );\n    }\n\n  render() {\n    return (\n       <div style={{width:'80%', margin: '0 auto'}}>\n        {this.renderVillainGrid()}\n        </div>\n    );\n  }\n\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dapp } from \"./components/Dapp\";\n\n// We import bootstrap here, but you can remove if you want\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// This is the entry point of your application, but it just renders the Dapp\n// react component. All of the logic is contained in it.\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dapp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}